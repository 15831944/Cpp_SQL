
/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// KEY ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////	
	기본키(PRIMARY KEY) : 주민등록번호처럼 테이블의 각 레코드(테이블의 행)들을 고유하게 식별해주는 역할
	특징 :
	(1)속성이 항상 고유한 값을 가져야한다.
	(2)속성이 확실히 널 값을 가지면 안된다.(NOT NULL)
	(3)속성의 값이 변경될 가능성이 높은 속성은 기본키로 선정X
	(4)테이블에 기본키는 하나만 만들 수 있다.
	
	후보키(CANDIDATE KEY) : 기본키가 될 수 있는 후보 (ex) 주민등록번호(기본키), 핸드폰번호(후보키)
	특징 :
	(1) NOT NULL
	(2) 대체키(ALTERNATE KEY)와 기본키(PRIMARY KEY)가 포함 됨. 선택 되어짐
	
	복합키(COMPOSITE KEY) : 각 튜플들을 식별할 수 있는 두개 또는 그 이상의 속성들로 구성된 후보키
	
	슈퍼키 : 유일성은 만족하지만, 최소성은 만족X
	(EX) (주민등록번호,이름)=슈퍼키 보단 (주민등록번호)=기본키가 최소성을 만족시킴,
	
	유일성 : 하나의 키 값으로 하나의 튜플을 유일하게 식별
	최소성 : 키를 구성하는 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소의 속성으로 구성
*/
/*기본키*/
MySQL
CREATE TABLE dept
(
	sid INTEGER,
	last_name VARCHAR(30),
	first_name VARCHAR(30),
	PRIMARY KEY (sid)
);
Oracle
CREATE TABLE dept
(
	sid INTEGER PRIMARY KEY,
	last_name VARCHAR(30),
	first_name VARCHAR(30)
);

MySQL
ALTER TABLE customer ADD PRIMARY KEY (sid);

Oracle
ALTER TABLE customer ADD PRIMARY KEY (sid);



/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// SELECT ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
 
*/
SELECT * FROM 테이블명 WHERE 필드='조건' AND 필드2='조건'
SELECT 필드1,필드2,필드3 FROM 테이블명
SELECT * FROM TAB; /*존재하는 모든 테이블 보기*/
SELECT DISTINCT 필드1 FROM 테이블명 /*중복 제거하기*/
SELECT 필드1 FROM 테이블 WHERE 필드2 BETWEEN 00 AND 00 /*00부터 00사이에서 가져오기*/
SELECT 필드1 FROM 테이블 WHERE 필드2 LIKE '%단어%' /*단어가 포함된 테이블 가져오기*/
SELECT 필드1 FROM 테이블 WHERE 필드2 IS NULL
SELECT 필드1 FROM 테이블 WHERE 필드2 IS NOT NULL /*널값or널아닌값 가져오기*/



/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// 집계함수 ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
	
	1)SUM
	2)AVG
	3)MAX,MIN
	4)COUNT
*/
SELECT SUM(salary) FROM employee /*employee 테이블에서 salary 합계 NULL 값은 무시됨.*/
SELECT AVG(salary) FROM employee /*월급의 평균*/
SELECT MIN(salary), MAX(salary) FROM employee /*월급의 최대 값과 최소 값*/
SELECT COUNT(salary),COUNT(commision) FROM employee ; /*역시나 NULL 값은 무시*/
/*
	GROUP BY
	만약에 직급별로 월급 평균, 월급 합계 등 특정 그룹별로 집계함수를 사용하고 싶을때는 어캐할까?
	테이블에서 특정 그룹을 만들 수 있도록 하는 것이 바로 GROUP BY 절 입니다.
	한마디로 : 직급별 AVG 구하기
*/
SELECT job as 직급, AVG(salary) as 월급평균 
FROM employee 
GROUP BY job 

SELECT empName,job as 직급, AVG(salary) as 월급평균
FROM employee
GROUP BY job;
--> 오류 난다 why ? empName이 집계함수나 GROUP BY절에 있어야한다. 과장 483이라는 레코드는 사실상 여러개의 empName 으로 이뤄져있음 그래서 안됨

/*수정*/
SELECT empName,job as 직급, AVG(salary) as 월급평균
FROM employee
GROUP BY job,empName;


/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// 서브쿼리 ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
	
	*서브쿼리 사용가능한곳
	1)SELECT
	2)FROM
	3)WHERE
	4)HAVING
	5)ORDER BY
	*GROUP BY 이외엔 다 쓸 수 있음.
	
	단일행 서브쿼리 (Single Row Subquery)
	다중행 서브쿼리 (Multiple Row Subquery)
	다중컬럼 서브쿼리 (Multi Column Subquery)
*/

/*
	FROM 절 서브쿼리
	EX) 선택과목 B 테이블에서 'MATH'를 선택한학생들의 이름을 찾아, 학생 A테이블에서 모든 정보를 조회하는 쿼리
*/
SELECT *
FROM student A
WHERE A.student_name IN (SELECT B.student_name
							FROM subject B
							WHERE B.subject_name ='MATH');
							
/*
	FROM 절 서브쿼리
	EX) 공급한 물품(item_name)과 총수량(total_amt)을 알고 싶은데, 
	두 정보가 서로 다른 테이블에 들어있는 경우, 공급자(suppliers)와 주문(oreders) 
	두 테이블로부터 각각 원하는 데이터를 불러와 출력하는 쿼리
*/
	SELECT A.item_name, subquery1.total_amt '공급한 물품, 총수량'
	FROM suppliers A,
		(SELECT supplier_id, SUM(B.amount) as total_amt
			FROM orders B
			GROUP BY supplier_id) subquery1 'orders B 테이블에서 supplier_id,amount 로 부터'   
	WHERE subquery1.supplier_id =A.supplier_id;
/*	
	SELECT 절 서브쿼리 = 스칼라서브쿼리
	SELECT 절에 오는 서브쿠리는 반드시 단일 값을 리턴해야한다. sum,count,min,max 등과 같은 집계 함수가 많이 쓰임
	
*/
	SELECT product_name, list_price,
		ROUND(
			(SELECT AVG(list_price)
			FROM product p1
			WHERE p1.category_id = p2.category_id) , 2) avg_list_price
	FROM products p2
	ORDER BY product_name;


/*
	WHERE 절 서브쿼리
'플레이어 이름을 출력한다. Player 테이블에서. 조건 : 팀테이블에서 국적이 KOR인 선수인 경우에'	
*/
SELECT Player_name
FROM Player
WHERE Team_ID in (SELECT Team_ID 
					FROM Team
					WHERE Team_Country = 'KOR')
					
					
/*
	단일행 서브쿼리 (Single Row Subquery)					
	전체를 출력, 팀 테이블에서 조건 : 플레어테이블에서 플레이어 이름이 yongale인 경우 
*/
SELECT *
FROM Team 
WHERE Team_ID =(
				SELECT Team_ID
				FROM Player
				WHERE Player_name = "yonglae"
				)
ORDER BY Team_name; 

/*
	다중행 서브쿼리 (Multiple Row Subquery)
	전체를 출력, 팀 테이블에서 조건 : 플레어테이블에서 플레이어 이름이 yongale인 경우 (동명이인)
*/
SELECT *
FROM Team
WHERE Team_ID IN (
				SELECT Team_ID
				FROM Player
				WHERE Player_name = "yonglae"
				)
ORDER BY Team_name;

/*
	다중컬럼 서브쿼리 (Multi Column Subquery)
	
*/
SELECT *
FROM Player
WHERE (Team_ID, Height) IN ( 
						SELECT Team_ID, MIN(Height)
						FROM Player
						GROUP BY Team_ID
						)
ORDER BY Team_ID, Player_name;

/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// CASE WHEN ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
CASE WHEN 조건절 THEN 참일때 값 ELSE 거짓일 때 값 END 칼럼명
*/
SELECT DISTINCT GENDER,
CASE WHEN GENDER='001' TEHN '여' ELSE '남' END AS 성별
FROM MY_TABLE


/*다중 CASE WHEN*/
SELECT *,
	(CASE WHEN SCORE >='90' THEN 'A학점'
		WHEN (SCORE>='80' AND SCORE <'90' ) TEHN 'B학점'
		.
		.
		.
		ELSE 'F학점'
	END) AS '학점'
FROM MY_TABLE

/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// JOIN ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
	INNER JOIN
	OUTER JOIN
	CROSS JOIN
	SELF JOIN
*/

/* 
	INNER JOIN
	: JOIN이라고 하면 INNER JOIN 이다.
	SELECT <열 목록>
	FROM 첫 번째 테이블
		INNER JOIN 두 번째 테이블
		ON 조인될 조건
	WHERE 검색조건
*/
/*BUYTABLE에서 KJD라는 아이디를 가진 사람이 구매한 물건을 배송하기 위해서 두개으 테이블을 통째로 조인하려면..*/
SELECT B.ID, NAME, GOODNAME, ADDR, MOBILE +N
FROM BUYTABLE A
	INNER JOIN USERTABLE B
	ON A.ID = B.ID
WHERE A.ID ='KJD'


/* DINTINCT */
/*한 번이라도 물건을 구매한 VIP 고객 정보만 추출해 보기 == 겹치는 아이디를 전부 출력하는게 아니라 중복은 한번만*/
SELECT DISTINCT U.ID,NAME,ADDR
FROM USERTABLE U 
	INNER JOIN BUYTABLE B
	ON U.ID = B.ID
	

/*세 개 이상의 테이블 조인*/
/*1번테이블*/
CREATE TABLE StudentTable
{
	Name NVARCHAR(5) NOT NULL, PRIMARY KEY,
	Addr NVARCHAR(5) NOT NULL,
}
/*2번테이블*/
CREATE TABLE ClubTable
{
	Name NVARCHAR(5) NOT NULL PRIMARY KEY,
	Roomno INT NOT NULL
}
/*3번테이블*/
CREATE TABLE StdClubTable
{
	ID INT IDENTIFIED PRIMARY KEY
	StdNAME NVARCHAR(5) NOT NULL FOREIGN KEY REFERENCES StudentTable(NAME) 
	ClubName NVARCHAR(5) NOT NULL FOREIGN KEY REFERENCES ClubTable(Name)
}

/*3중 JOIN */
SELECT S.NAME,ADDR,C.NAME,ROOMNO
FROM StudentTable S 
	INNER JOIN StdClubTable SC
	ON S.NAME = SC.StdNAME
		INNER JOIN ClubTable C
		ON SC.ClubName = C.NAME;
		
		

/*OUTER JOIN*/
/*LEFT OUTER JOIN*/
SELECT A.NAME, B.AGE
FROM EX_TABLE A
	LEFT OUTER JOIN JOIN_TABLE B
	ON A.NO_EMP = B.NO_EMP
	AND A.DEPT = B.DEPT 

/*REIGT OUTER JOIN*/
SELECT A.NAME, B.AGE
FROM EX_TABLE A
	RIGHT OUTER JOIN JOIN_TABLE B
	ON A.NO_EMP = B.NO_EMP
	AND A.DEPT = B.DEPT 


/*CROSS JOIN : 모든 경우의 수를 전부 표현 3X4=12*/
SELECT A.NAME, B.AGE
FROM EX_TABLE A, JOIN_TABLE B


/*SELF JOIN : 자기 자신과 조인 3X3 = 9*/
SELECT A.NAME, B.AGE
FROM EX_TABLE A, EX_TABE B;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// 듀토리얼 연습 ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*INNER JOIN 2번에 CASE 쓴 경우*/
SELECT A.CustomerID ,COUNT(B.CustomerID) as 갯수,B.OrderID ,COUNT(B.OrderID)as 주문갯수 ,CASE WHEN COUNT(B.OrderID) >=2 THEN '2이상' ELSE '2이하' END as 케이스
FROM Customers A Inner join Orders B
on A.CustomerID = B.CustomerID INNER JOIN OrderDetails C
on B.OrderID = C.OrderID  
GROUP BY A.CustomerID, B.OrderID
HAVING B.OrderID < 100000
ORDER BY A.CustomerID , B.OrderID

/*SELECT 절에 SELECT 이중 으로 쓴 경우 */
SELECT CustomerID , (
				SELECT COUNT(CustomerID)
                FROM ORDERS x
                WHERE p.CustomerID=x.CustomerID) as 커스터머랑오더의ID같은경우
FROM Customers p         

/*FROM 절에 쓴 경우*/
SELECT *
FROM Orders p, ( 
				SELECT CustomerID,EmployeeID,OrderDate
                FROM Orders 
                WHERE CustomerID= 2) x
Where p.CustomerID = x.CustomerID              
                     

SELECT COUNT(B.ProductID) FROM [Orders] A INNER JOIN [OrderDetails] B ON A.OrderID = B.OrderID
SELECT *  FROM [Orders] A INNER JOIN [OrderDetails] B ON A.OrderID = B.OrderID INNER JOIN [Products] C ON C.ProductID = B.ProductID
SELECT * FROM [OrderDetails] WHEHRE (SELECT A.ShipperID FROM [Orders] A WHERE A.ShipperID >=3)
SELECT * FROM [Orders] A WHERE A.ShipperID >=3 //68개 중 
SELECT * FROM (SELECT * FROM [Orders] A WHERE A.ShipperID >=3) C WHERE C.OrderID=10248
SELECT CASE WHEN C.EmployeeID =9 THEN C.EmployeeID+3 WHEN C.EmployeeID = 5 THEN '퍽킹' ELSE '99999999999999999999' END AS 더하기 , C.EmployeeID FROM (SELECT * FROM [Orders] A WHERE A.ShipperID >=3 AND A.EmployeeID IS NOT NULL ) C WHERE C.OrderID>=10248 

/////////////////////////////////////////////////////////
////////////////////////////////////////////SQL 계획 및 코드
/////////////////////////////////////////////////////////
//1. 상위 3개 출력하라
MYSQL 마지막 LIMIT 3
ORALCE WHERE ROWNUM <=3 
//2. 중복을 제거해라
count(distinct name)
//3. FROM절의 인라인 뷰 함수 명칭 지정은 필수다.
SELECT *
FROM (SELECT NAME,COUNT(NAME) COUNT FROM ANIMAL_INS WHERE NAME IS NOT NULL GROUP BY NAME)
WHERE COUNT >=2 
ORDER BY NAME 
//4.2020-06-04 09:20(DATETIME) 을 09로 바꾸는 방법 
SELECT  HOUR(DATETIME ) ,COUNT(HOUR (DATETIME ))
FROM ANIMAL_OUTS 
WHERE  HOUR (DATETIME )>=9 AND  HOUR (DATETIME ) <=19
GROUP BY HOUR (DATETIME )

//5. string, data 다루는 것 연습하기 


